# The tagger.py starter code for CSC384 A4.
# Currently reads in the names of the training files, test file and output file,
# and calls the tagger (which you need to implement)
import sys
# import numpy as np
from math import log
from copy import copy

# prob = np.zeros((76, length_of_the_sentence))  # P(S) prob[t, i]
# Initial = {}
# T = {}
M = {}
Initial = {19: 1627, 48: 7, 72: 74, 22: 5095, 30: 7162, 3: 1189, 27: 730, 11: 331,
           55: 128, 8: 509, 52: 135, 4: 1290, 15: 477, 12: 428, 10: 125, 75: 13,
           64: 20, 0: 261, 57: 36, 17: 246, 13: 291, 14: 224, 7: 1250, 39: 40, 53: 329,
           59: 86, 29: 101, 6: 182, 66: 8, 18: 135, 61: 21, 20: 14, 34: 46, 44: 2, 21: 122,
           26: 34, 40: 121, 45: 14, 46: 15, 41: 32, 71: 406, 23: 36, 60: 13, 9: 13, 62: 23,
           16: 13, 73: 16, 5: 12, 70: 10, 69: 6, 35: 36, 54: 55, 68: 23, 32: 21, 38: 2, 58: 9, 47: 20, 1: 5,
           74: 6, 51: 9, 67: 4, 36: 2, 33: 5, 31: 2, 65: 7, 56: 1, 42: 1, 24: 1, 2: 0, 25: 0, 28: 0, 37: 0, 43: 0, 49: 0, 50: 0, 63: 0}
T = {(None, 19): 1627, (19, 19): 1300, (19, 54): 1873, (54, 4): 1012, (4, 27): 1157, (27, 3): 6765, (3, 17): 10712, (17, 27): 3517, (27, 22): 1741,
     (22, 29): 2528, (None, 48): 7, (48, 57): 13, (57, 22): 415, (22, 35): 2084, (35, 0): 671, (0, 29): 2150, (29, 22): 1613, (22, 4): 996,
     (4, 54): 419, (54, 9): 173, (9, 4): 46, (4, 22): 750, (22, 54): 4526, (54, 21): 50, (21, 4): 145, (4, 8): 468, (8, 3): 368, (3, 65): 12,
     (65, 17): 88, (17, 26): 2929, (26, 17): 1077, (17, 3): 162, (27, 0): 617, (0, 19): 107, (19, 17): 284, (17, 47): 417, (47, 57): 1481, (57, 27): 1253,
     (27, 12): 989, (12, 0): 378, (0, 17): 5669, (17, 29): 9981, (None, 72): 74, (72, 52): 5, (52, 4): 312, (4, 56): 340, (56, 12): 215, (12, 17): 1244, (27, 10):
         302, (10, 18): 520, (18, 4): 347, (4, 5): 89, (5, 17): 8, (29, 12): 233, (12, 26): 217, (26, 22): 298, (54, 27): 1219, (3, 0): 4370, (17, 23): 146, (23, 47): 115,
     (57, 11): 141, (11, 17): 3220, (17, 7): 1815, (7, 11): 179, (11, 10): 32, (18, 27): 990, (26, 3): 1581, (3, 71): 63, (71, 29): 223, (None, 22): 5095, (54, 3): 1192,
     (26, 0): 393, (7, 54): 830, (54, 32): 445, (32, 56): 3320, (56, 8): 87, (8, 22): 1985, (35, 55): 579,
     (55, 32): 332, (56, 22): 1296, (29, 4): 1348, (4, 75): 249, (75, 27): 358, (0, 18): 1569,
     (18, 29): 2459, (4, 29): 3362, (12, 3): 216, (18, 7): 686, (7, 10): 83, (10, 26): 266, (3, 18): 1311,
     (29, 7): 1792, (17, 35): 838, (17, 4): 737, (29, 55): 1155, (55, 27): 841, (27, 11): 1656, (55, 12): 62,
     (12, 18): 441, (17, 66): 60, (66, 11): 266, (26, 11): 498, (11, 16): 19, (16, 3): 3, (3, 4): 433, (4, 0): 1628, (0, 0): 716,
     (23, 35): 81, (55, 5): 339, (5, 27): 1069, (7, 3): 712, (17, 63): 10, (63, 17): 29, (17, 32): 509, (56, 27): 779, (None, 30): 7162,
     (30, 6): 26, (6, 58): 1, (58, 22): 93, (29, 19): 995, (19, 29): 1912, (30, 19): 297, (19, 47): 343, (57, 19): 91, (19, 27): 239, (11, 20): 58,
     (20, 17): 355, (27, 33): 7, (33, 29): 26, (63, 4): 1, (27, 17): 1553, (7, 22): 1386, (22, 47): 1528, (47, 4): 389, (4, 57): 718, (57, 4): 257,
     (3, 19): 401, (30, 75): 2, (75, 12): 6, (12, 19): 23, (17, 54): 828, (54, 5): 828, (5, 29): 746, (29, 59): 142, (59, 72): 6, (72, 29): 322,
     (22, 53): 1136, (53, 22): 651, (22, 49): 48, (49, 57): 266, (57, 3): 395, (71, 17): 43, (53, 32): 129, (56, 11): 335, (17, 5): 155,
     (22, 34): 733, (34, 55): 180, (55, 0): 111, (54, 29): 1774, (17, 17): 1756, (47, 59): 113, (59, 38): 30, (38, 3): 92, (None, 3): 1189,
     (29, 10): 101, (10, 17): 232, (17, 10): 53, (11, 18): 1035, (0, 10): 38, (7, 12): 191, (29, 48): 8, (3, 12): 287, (17, 22): 773,
     (None, 27): 730, (10, 29): 149, (0, 4): 158, (4, 59): 50, (59, 32): 84, (56, 4): 298, (27, 4): 333, (4, 3): 458,
     (17, 25): 378, (25, 17): 632, (11, 64): 124, (64, 17): 508, (35, 57): 431, (18, 35): 242, (57, 5): 279, (7, 75): 166,
     (7, 17): 329, (30, 22): 525, (30, 30): 316, (27, 19): 1264, (30, 4): 70, (4, 55): 298, (0, 8): 219,
     (35, 29): 148, (19, 35): 382, (0, 27): 707, (19, 25): 578, (25, 0): 131, (29, 0): 605, (55, 3): 625,
     (35, 3): 619, (26, 10): 64, (29, 13): 202, (13, 0): 27, (18, 54): 243, (7, 72): 125, (57, 24): 34,
     (24, 55): 20, (55, 11): 302, (11, 2): 29, (2, 17): 95, (47, 44): 28, (44, 58): 1, (58, 27): 45,
     (18, 26): 630, (0, 33): 4, (33, 17): 6, (19, 24): 19, (24, 29): 168, (29, 8): 498, (8, 65): 4,
     (65, 29): 94, (29, 47): 111, (47, 38): 504, (38, 0): 110, (38, 27): 69, (3, 61): 18, (61, 1): 1,
     (1, 29): 91, (7, 4): 709, (4, 1): 59, (8, 19): 234, (None, 11): 331, (11, 19): 50, (0, 32): 411,
     (18, 25): 57, (18, 17): 73, (29, 57): 93, (26, 55): 99, (55, 66): 156, (66, 3): 391, (27, 55): 297,
     (None, 55): 128, (29, 3): 971, (35, 27): 242, (54, 22): 1091, (22, 32): 285, (56, 29): 742, (22, 39): 659,
     (39, 19): 34, (30, 18): 7, (22, 52): 2401, (52, 56): 1448, (22, 5): 264, (5, 4): 179, (29, 30): 1212,
     (55, 29): 216, (29, 27): 778, (None, 8): 509, (30, 17): 20, (22, 46): 505, (46, 57): 228, (None, 52): 135,
     (52, 22): 225, (56, 5): 461, (5, 7): 143, (7, 49): 1, (49, 17): 17, (30, 3): 71, (35, 4): 877, (0, 7): 531,
     (22, 51): 132, (51, 38): 57, (38, 57): 263, (None, 4): 1290, (59, 56): 893, (47, 22): 35, (30, 15): 96, (15, 29): 559,
     (None, 15): 477, (5, 3): 236, (29, 75): 155, (75, 29): 204, (64, 19): 16, (54, 11): 600, (10, 1): 3, (1, 18): 33,
     (27, 23): 18, (23, 29): 10, (29, 68): 35, (68, 3): 129, (3, 2): 138, (24, 0): 12, (None, 12): 428, (12, 10): 44,
     (10, 35): 9, (7, 0): 487, (0, 16): 45, (16, 29): 55, (27, 65): 35, (65, 18): 60, (None, 10): 125, (35, 59): 305,
     (59, 3): 103, (7, 29): 96, (55, 59): 16, (56, 3): 888, (26, 13): 46, (13, 22): 440, (57, 29): 592, (None, 75): 13,
     (75, 10): 4, (10, 0): 88, (3, 72): 40, (72, 5): 38, (17, 13): 218, (13, 35): 100, (8, 0): 85, (0, 26): 219, (26, 18): 278,
     (18, 75): 175, (54, 17): 86, (26, 19): 243, (17, 18): 571, (17, 0): 136, (18, 20): 10, (20, 27): 14, (22, 12): 150, (12, 55): 19,
     (11, 0): 579, (54, 7): 134, (17, 6): 79, (6, 29): 57, (52, 37): 519, (37, 57): 249, (57, 32): 299, (56, 66): 120, (66, 12): 30,
     (55, 19): 66, (19, 5): 20, (5, 26): 204, (22, 27): 687, (17, 55): 315, (55, 1): 13, (1, 8): 61, (8, 11): 102, (None, 64): 20,
     (64, 29): 226, (55, 4): 354, (29, 11): 263, (38, 55): 120, (4, 4): 1084, (29, 53): 173, (None, 0): 261, (46, 32): 42, (72, 19): 15,
     (57, 20): 7, (34, 12): 20, (12, 27): 111, (None, 57): 36, (None, 17): 246, (53, 29): 345, (32, 37): 478, (37, 3): 143, (53, 13): 20,
     (27, 67): 1, (67, 22): 110, (30, 54): 3, (30, 71): 5, (29, 6): 85, (6, 40): 43, (40, 22): 153, (49, 32): 97, (51, 3): 19,
     (29, 45): 9, (45, 59): 63, (59, 22): 230, (None, 13): 291, (13, 52): 65, (22, 43): 52, (43, 12): 40, (12, 22): 76,
     (52, 59): 603, (59, 29): 172, (4, 9): 153, (9, 11): 61, (17, 75): 371, (34, 27): 39, (4, 7): 275, (7, 59): 68,
     (59, 55): 120, (29, 52): 143, (37, 27): 80, (55, 24): 44, (24, 9): 16, (9, 22): 638, (25, 4): 5, (17, 9): 342,
     (4, 61): 84, (61, 27): 96, (8, 10): 33, (25, 19): 7, (19, 18): 55, (18, 47): 106, (57, 9): 43, (9, 17): 19,
     (18, 52): 96, (61, 29): 166, (24, 47): 5, (9, 3): 212, (17, 52): 308, (52, 32): 40, (32, 49): 148, (49, 38): 146, (0, 9): 104, (9, 21): 19, (21, 27): 156,
     (3, 16): 67, (16, 35): 7, (30, 13): 27, (13, 34): 32, (34, 22): 116, (22, 55): 91, (32, 43): 152, (43, 27): 41, (34, 4): 154, (12, 8): 83,
     (None, 14): 224, (14, 52): 39, (4, 37): 58, (37, 12): 17, (None, 7): 1250, (39, 3): 267, (35, 61): 29, (61, 8): 24, (7, 13): 84, (13, 17): 86, (22, 22): 91,
     (17, 36): 12, (36, 57): 76, (57, 7): 117, (7, 57): 61, (30, 11): 20, (11, 4): 25, (1, 27): 12, (9, 12): 61, (3, 57): 12, (57, 17): 55, (9, 8): 32, (22, 41): 325, (41, 59): 342, (37, 0): 255, (54, 13): 46,
     (17, 39): 190, (39, 4): 205, (46, 38): 72, (56, 19): 174, (54, 66): 197, (29, 26): 134, (22, 30): 18, (30, 60): 15, (60, 3): 6, (7, 27): 299, (59, 37): 99, (37, 36): 1, (27, 27): 50, (35, 66): 10,
     (66, 18): 19, (12, 75): 14, (29, 41): 32, (39, 59): 177, (54, 24): 144, (24, 27): 101, (55, 9): 44, (66, 55): 15, (19, 67): 13, (67, 12): 1, (29, 65): 82, (6, 52): 74, (59, 11): 20, (18, 53): 50, (39, 27): 87, (26, 12): 180, (27, 20): 45, (20, 19): 10, (0, 2): 2, (29, 54): 392, (54, 6): 42, (6, 32): 14, (39, 0): 179, (19, 39): 89, (39, 55): 101, (22, 7): 318, (12, 61): 12, (34, 3): 49, (0, 21): 44, (21, 23): 26, (23, 52): 56, (6, 39): 17, (19, 55): 33, (12, 12): 108, (12, 29): 499, (57, 10): 23, (10, 72): 9, (72, 18): 40, (22, 8): 140, (34, 29): 38, (55, 72): 6, (54, 0): 234, (30, 53): 22, (53, 3): 185, (13, 27): 71, (27, 73): 40, (73, 29): 95, (4, 53): 164, (10, 7): 66, (56, 7): 131, (7, 56): 114, (22, 58): 194, (58, 18): 3, (18, 8): 129, (7, 18): 229, (38, 22): 9, (22, 23): 15, (23, 46): 5, (38, 4): 144, (27, 18): 339, (0, 59): 9, (49, 3): 78, (34, 0): 182, (37, 5): 23, (8, 21): 39, (4, 52): 75, (52, 29): 110, (18, 56): 19, (4, 12): 231, (30, 40): 12, (30, 59): 15, (59, 27): 100, (19, 4): 203, (7, 19): 451, (30, 52): 20, (26, 4): 36, (4, 66): 62, (23, 54): 132, (27, 8): 135, (4, 49): 43, (0, 64): 185, (64, 72): 44, (53, 27): 117, (29, 63): 40, (63, 29): 39, (22, 40): 263, (40, 59): 377, (24, 8): 12, (8, 4): 162, (59, 17): 16, (53, 72): 6, (22, 9): 79, (12, 35): 129, (35, 10): 80, (6, 22): 211, (11, 12): 205, (18, 9): 90, (9, 27): 35, (17, 24): 30, (24, 22): 7, (29, 72): 100, (4, 14): 43, (14, 35): 313, (35, 21): 56, (21, 22): 74, (43, 7): 5, (59, 66): 4, (66, 4): 69, (22, 56): 469, (56, 32): 227, (27, 21): 114, (3, 64): 604, (29, 35): 160, (59, 57): 138, (9, 54): 113, (19, 7): 296, (30, 7): 37, (34, 48): 3, (48, 17): 10, (57, 12): 113, (30, 8): 27, (56, 21): 73, (21, 32): 63, (29, 17): 316, (4, 63): 14, (63, 8): 2, (4, 32): 186, (4, 10): 134, (54, 1): 9, (8, 26): 32, (18, 13): 80, (13, 4): 30, (52, 43): 77, (12, 32): 20, (11, 3): 1, (30, 12): 41, (12, 39): 240, (19, 23): 36, (37, 48): 4, (54, 8): 87, (30, 46): 4, (46, 22): 35, (22, 57): 60, (19, 12): 12, (29, 15): 90, (7, 14): 78, (57, 66): 82, (66, 17): 17, (17, 20): 19, (None, 39): 40, (39, 22): 90, (22, 59): 20, (59, 4): 281, (0, 22): 169, (59, 0): 124, (34, 11): 6, (47, 11): 19, (6, 0): 53, (27, 13): 195, (10, 4): 46, (7, 41): 21, (4, 6): 46, (56, 17): 140, (72, 55): 13, (13, 51): 14, (51, 57): 94, (2, 26): 10, (51, 59): 44, (38, 66): 6, (66, 27): 18, (4, 19): 88, (0, 66): 9, (29, 39): 76, (52, 49): 410, (21, 29): 165, (17, 51): 51, (51, 4): 33, (7, 35): 83, (35, 22): 96, (29, 34): 29, (22, 0): 120, (40, 56): 25, (56, 26): 41, (54, 10): 39, (35, 65): 36, (54, 64): 12, (56, 6): 62, (39, 29): 68, (29, 40): 51, (75, 63): 1, (29, 23): 150, (32, 17): 7, (46, 4): 66, (4, 38): 112, (9, 19): 116, (19, 58): 27, (58, 32): 46, (57, 55): 32, (53, 21): 23, (21, 39): 9, (19, 51): 23, (55, 22): 395, (22, 3): 199, (72, 27): 207, (29, 62): 36, (62, 29): 110, (30, 34): 3, (30, 26): 6, (None, 53): 329, (24, 57): 3, (17, 19): 160, (29, 32): 73, (17, 8): 421, (None, 59): 86, (59, 9): 11, (29, 18): 140, (49, 12): 29, (64, 64): 11, (52, 10): 4, (17, 56): 45, (29, 61): 32, (4, 62): 89, (24, 5): 29, (18, 10): 7, (6, 3): 50, (7, 47): 61, (57, 6): 5, (6, 4): 41, (10, 60): 4, (60, 18): 6, (26, 60): 3, (7, 8): 199, (30, 39): 9, (22, 11): 21, (34, 59): 123, (35, 62): 62, (54, 12): 123, (53, 59): 6, (62, 4): 12, (38, 62): 5, (53, 12): 76, (17, 61): 22, (10, 27): 46, (4, 72): 24, (72, 26): 10, (53, 5): 156, (17, 30): 71, (30, 55): 3, (55, 17): 76, (18, 72): 23, (72, 30): 8, (30, 29): 7, (13, 54): 184, (13, 19): 38, (3, 10): 175, (17, 73): 93, (73, 27): 76, (26, 30): 2, (71, 71): 11, (71, 30): 3, (30, 27): 14, (25, 29): 19, (57, 26): 47, (35, 1): 23, (1, 17): 95, (29, 69): 57, (69, 54): 23, (29, 21): 73, (21, 9): 22, (43, 29): 54, (18, 11): 9, (4, 43): 7, (43, 4): 22, (4, 69): 21, (37, 55): 81, (39, 10): 21, (39, 13): 40, (37, 4): 155, (19, 52): 132, (59, 49): 78, (49, 22): 25, (17, 67): 92, (29, 9): 68, (47, 0): 8, (54, 14): 13, (35, 12): 85, (12, 72): 63, (59, 6): 5, (12, 21): 23, (27, 29): 150, (18, 40): 17, (34, 18): 18, (18, 55): 171, (5, 32): 121, (54, 35): 19, (39, 6): 31, (39, 9): 15, (4, 46): 12, (22, 38): 25, (30, 10): 13, (32, 29): 30, (53, 4): 126, (7, 53): 222, (23, 39): 27, (7, 51): 2, (19, 0): 29, (19, 16): 3, (16, 52): 16, (56, 18): 64, (12, 47): 9, (47, 32): 91, (3, 20): 353, (20, 10): 35, (4, 41): 44, (41, 29): 46, (56, 0): 147, (3, 21): 66, (3, 1): 98, (24, 35): 7, (55, 69): 6, (69, 17): 22, (26, 72): 16, (72, 7): 42, (4, 47): 45, (64, 26): 13, (46, 44): 13, (44, 12): 5, (55, 14): 8, (14, 39): 109, (39, 12): 85, (27, 71): 97, (13, 29): 59, (None, 29): 101, (46, 59): 41, (25, 64): 27, (56, 55): 30, (29, 24): 5, (53, 61): 4, (46, 3): 49, (10, 30): 4, (30, 16): 1, (16, 53): 12, (72, 32): 44, (57, 8): 59, (30, 21): 8, (43, 32): 3, (22, 24): 12, (18, 5): 58, (54, 19): 228, (30, 0): 33, (55, 6): 17, (34, 66): 1, (34, 57): 17, (22, 21): 14, (37, 7): 1, (7, 55): 208, (55, 13): 19, (35, 42): 20, (42, 29): 12, (19, 30): 17, (60, 53): 1, (22, 17): 29, (21, 58): 16, (22, 19): 12, (54, 26): 25, (4, 11): 64, (55, 18): 74, (55, 10): 19, (53, 0): 44, (None, 6): 182, (6, 35): 19, (35, 19): 50, (15, 19): 37, (4, 34): 14, (4, 26): 67, (17, 64): 29, (64, 7): 83, (52, 30): 1, (60, 29): 3, (22, 45): 46, (45, 49): 3, (37, 22): 6, (30, 35): 9, (55, 55): 6, (18, 22): 167, (4, 58): 32, (58, 65): 1, (17, 53): 44, (45, 4): 1, (15, 15): 46, (54, 15): 4, (75, 22): 53, (60, 17): 7, (47, 18): 10, (25, 18): 119, (44, 3): 11, (66, 0): 36, (11, 72): 39, (8, 56): 8, (64, 27): 71, (55, 30): 5, (12, 64): 38, (64, 16): 4, (16, 1): 2, (30, 45): 4, (19, 45): 5, (45, 29): 13, (64, 18): 154, (64, 60): 3, (60, 7): 6, (12, 54): 53, (56, 36): 3, (36, 3): 22, (18, 32): 106, (7, 32): 50, (17, 60): 10, (13, 39): 67, (55, 8): 40, (58, 11): 13, (53, 7): 13, (53, 19): 34, (75, 7): 46, (7, 52): 50, (62, 7): 48, (4, 13): 56, (0, 72): 88, (18, 19): 37, (41, 3): 19, (22, 10): 13, (22, 13): 22, (75, 5): 71, (17, 58): 77, (55, 65): 2, (23, 58): 28, (53, 57): 3, (18, 3): 46, (56, 13): 65, (13, 3): 98, (8, 24): 1, (35, 9): 31, (22, 61): 21, (61, 12): 4, (65, 7): 23, (20, 18): 17, (63, 27): 8, (63, 18): 22, (17, 41): 37, (8, 12): 106, (75, 19): 2, (36, 4): 10, (64, 0): 19, (8, 18): 29, (17, 69): 54, (69, 35): 58, (None, 66): 8, (13, 18): 19, (26, 33): 10, (33, 22): 4, (27, 7): 12, (7, 6): 40, (24, 3): 14, (29, 5): 22, (27, 6): 33, (29, 67): 56, (39, 32): 14, (56, 69): 26, (59, 36): 7, (36, 0): 27, (12, 23): 15, (None, 18): 135, (53, 11): 75, (54, 69): 14, (69, 23): 1, (23, 22): 38, (38, 35): 1, (4, 68): 32, (17, 74): 75, (74, 29): 47, (14, 34): 32, (39, 14): 11, (14, 4): 6, (4, 17): 38, (18, 24): 5, (53, 66): 52, (34, 10): 5, (24, 32): 26, (58, 3): 66, (55, 21): 20, (6, 41): 34, (41, 22): 112, (56, 53): 7, (8, 61): 1, (12, 41): 2, (35, 48): 10, (47, 3): 159, (49, 44): 14, (44, 22): 9, (26, 24): 15, (37, 29): 55, (22, 66): 92, (66, 8): 9, (47, 29): 23, (8, 16): 3, (13, 11): 21, (18, 61): 11, (12, 5): 19, (75, 0): 29, (9, 52): 27, (4, 50): 16, (50, 12): 12, (12, 44): 4, (44, 27): 30, (59, 12): 43, (75, 11): 31, (52, 3): 8, (10, 53): 1, (7, 21): 77, (19, 8): 39, (17, 45): 13, (12, 53): 14, (21, 51): 9, (2, 22): 4, (27, 39): 1, (51, 50): 6, (50, 3): 35, (12, 58): 23, (27, 26): 1, (12, 69): 12, (7, 73): 34, (7, 20): 6, (20, 62): 1, (62, 18): 17, (19, 32): 84, (5, 6): 3, (None, 61): 21, (75, 24): 8, (24, 4): 38, (54, 61): 36, (37, 65): 18, (17, 57): 116, (47, 27): 18, (13, 45): 8, (45, 22): 17, (19, 53): 24, (45, 12): 9, (12, 56): 19, (40, 29): 37, (19, 41): 43, (41, 56): 38, (53, 18): 12, (59, 5): 5, (None, 20): 14, (29, 74): 14, (74, 27): 64, (58, 29): 58, (19, 22): 48, (47, 17): 16, (10, 19): 14, (53, 6): 22, (30, 23): 3, (39, 42): 6, (42, 17): 1, (9, 58): 6, (58, 55): 1, (13, 53): 10, (26, 16): 15, (16, 27): 43, (59, 61): 20, (61, 6): 3, (35, 36): 24, (39, 11): 35, (None, 34): 46, (None, 44): 2, (0, 3): 35, (52, 27): 7, (None, 21): 122, (10, 33): 13, (33, 33): 34, (33, 26): 2, (0, 11): 16, (16, 41): 1, (41, 4): 10, (66, 10): 22, (10, 32): 3, (35, 17): 44, (5, 8): 49, (26, 64): 50, (47, 14): 1, (14, 38): 1, (38, 21): 10, (73, 16): 1, (16, 23): 18, (56, 64): 7, (71, 27): 38, (65, 72): 5, (72, 4): 74, (35, 5): 38, (25, 20): 8, (20, 63): 3, (18, 67): 34, (67, 19): 26, (66, 29): 99, (29, 58): 13, (58, 52): 1, (None, 26): 34, (30, 72): 4, (20, 12): 16, (54, 62): 9, (21, 75): 10, (57, 65): 7, (6, 34): 11, (22, 42): 20, (42, 12): 7, (None, 40): 121, (65, 27): 57, (None, 45): 14, (59, 8): 14, (15, 22): 16, (9, 53): 4, (30, 14): 7, (13, 40): 38, (72, 12): 8, (45, 27): 2, (75, 8): 13, (8, 57): 34, (17, 12): 41, (59, 13): 6, (53, 24): 13, (27, 30): 18, (18, 30): 31, (40, 27): 2, (8, 55): 32, (5, 11): 109, (9, 18): 15, (12, 11): 50, (75, 18): 10, (37, 9): 4, (19, 48): 3, (26, 73): 34, (18, 46): 15, (5, 71): 1, (71, 18): 7, (34, 42): 4, (42, 22): 3, (18, 66): 25, (64, 4): 31, (72, 70): 5, (70, 52): 3, (61, 9): 6, (69, 27): 19, (66, 32): 3, (51, 0): 3, (34, 65): 6, (7, 71): 29, (71, 39): 15, (29, 71): 35, (71, 52): 31, (7, 70): 3, (70, 27): 23, (56, 9): 128, (9, 57): 1, (22, 65): 16, (65, 71): 5, (69, 21): 17, (21, 52): 34, (4, 44): 10, (49, 4): 13, (19, 69): 7, (69, 29): 31, (29, 14): 36, (69, 71): 5, (10, 20): 8, (20, 26): 15, (12, 20): 13, (12, 57): 8, (0, 12): 15, (19, 56): 38, (12, 4): 77, (27, 24): 80, (7, 69): 14, (69, 12): 5, (18, 68): 11, (68, 11): 10, (56, 24): 87, (7, 58): 15, (54, 59): 20, (4, 20): 18, (20, 5): 5, (59, 21): 11, (7, 62): 15, (62, 27): 36, (10, 65): 3, (65, 12): 4, (12, 66): 6, (66, 7): 14, (20, 3): 1, (10, 54): 4, (6, 19): 26, (35, 7): 17, (69, 0): 46, (7, 65): 38, (4, 35): 54, (75, 66): 83, (7, 15): 9, (52, 12): 16, (7, 5): 33, (11, 56): 3, (9, 47): 33, (22, 37): 19, (14, 21): 3, (None, 46): 15, (21, 26): 72, (15, 27): 13, (2, 29): 21, (23, 4): 22, (3, 33): 24, (75, 3): 59, (None, 41): 32, (30, 62): 1, (65, 4): 13, (54, 18): 41, (54, 68): 12, (68, 12): 11, (59, 53): 2, (39, 65): 8, (38, 5): 11, (38, 19): 14, (35, 11): 62, (22, 6): 15, (35, 8): 21, (7, 9): 25, (12, 9): 5, (25, 7): 5, (10, 68): 1, (68, 29): 2, (30, 1): 1, (40, 3): 6, (73, 32): 8, (5, 9): 5, (26, 48): 12, (73, 66): 10, (18, 23): 61, (26, 36): 19, (9, 29): 15, (12, 7): 33, (24, 66): 7, (35, 73): 5, (73, 54): 2, (54, 57): 9, (66, 22): 21, (18, 1): 11, (54, 55): 66, (5, 12): 24, (7, 66): 17, (22, 73): 3, (73, 7): 19, (62, 64): 4, (27, 64): 39, (67, 3): 54, (4, 18): 29, (16, 75): 2, (57, 21): 33, (5, 55): 19, (39, 21): 33, (21, 0): 51, (75, 4): 101, (27, 36): 23, (17, 11): 33, (8, 32): 20, (43, 8): 5, (22, 75): 8, (19, 71): 54, (None, 71): 406, (75, 9): 9, (71, 4): 19, (30, 41): 5, (71, 19): 10, (56, 71): 18, (71, 5): 5, (58, 24): 4, (19, 3): 38, (19, 72): 29, (59, 43): 25, (43, 22): 54, (22, 18): 12, (71, 54): 299, (6, 12): 18, (43, 3): 24, (56, 23): 2, (12, 52): 48, (23, 3): 9, (43, 21): 28, (66, 72): 4, (72, 3): 30, (2, 18): 25, (53, 17): 26, (17, 59): 14, (53, 20): 3, (55, 71): 3, (37, 10): 11, (23, 12): 1, (15, 18): 4, (13, 41): 17, (11, 1): 8, (39, 69): 5, (71, 45): 4, (45, 21): 1, (39, 57): 41, (29, 73): 16, (41, 27): 14, (54, 56): 4, (22, 68): 8, (6, 11): 9, (57, 18): 26, (22, 20): 23, (20, 29): 62, (46, 12): 9, (59, 65): 10, (65, 32): 20, (12, 1): 4, (52, 8): 11, (26, 59): 1, (62, 32): 12, (73, 75): 2, (69, 8): 6, (27, 1): 15, (61, 10): 4, (26, 29): 15, (19, 59): 6, (26, 65): 28, (65, 0): 20, (72, 22): 45, (20, 0): 25, (34, 5): 12, (7, 39): 14, (75, 32): 41, (39, 18): 6, (73, 8): 3, (5, 10): 10, (8, 13): 9, (13, 12): 11, (19, 26): 11, (30, 74): 1, (74, 30): 1, (7, 30): 7, (9, 30): 1, (26, 21): 34, (21, 55): 15, (42, 3): 12, (61, 0): 58, (21, 7): 17, (19, 9): 9, (26, 20): 3, (8, 27): 85, (64, 54): 17, (44, 11): 7, (37, 11): 15, (25, 12): 10, (12, 6): 2, (12, 14): 3, (57, 0): 70, (34, 36): 6, (21, 47): 30, (44, 4): 12, (8, 72): 4, (29, 64): 47, (62, 8): 12, (5, 19): 9, (7, 34): 9, (11, 71): 5, (21, 19): 4, (21, 54): 66, (22, 69): 7, (37, 62): 12, (13, 47): 82, (19, 64): 3, (55, 64): 5, (57, 61): 10, (18, 0): 66, (65, 64): 6, (54, 23): 4, (26, 27): 5, (30, 58): 3, (7, 61): 23, (61, 4): 21, (7, 63): 30, (19, 73): 6, (73, 4): 19, (2, 4): 1, (17, 46): 15, (38, 17): 11, (37, 1): 11, (37, 19): 9, (35, 13): 15, (13, 7): 2, (38, 29): 25, (35, 32): 47, (21, 8): 6, (18, 57): 74, (7, 23): 13, (4, 23): 8, (61, 68): 2, (75, 57): 2, (0, 68): 8, (68, 4): 4, (58, 12): 10, (23, 51): 8, (18, 34): 59, (58, 5): 24, (39, 23): 1, (59, 24): 4, (24, 56): 6, (4, 25): 9, (24, 7): 20, (0, 71): 26, (71, 22): 4, (56, 20): 4, (69, 10): 2, (75, 68): 2, (68, 17): 20, (18, 64): 3, (24, 19): 7, (7, 24): 4, (5, 22): 27, (17, 72): 248, (51, 22): 6, (4, 21): 26, (29, 33): 7, (23, 41): 9, (0, 34): 4, (56, 62): 4, (66, 19): 15, (64, 71): 2, (12, 71): 2, (71, 55): 10, (61, 7): 18, (8, 14): 27, (71, 7): 32, (5, 5): 14, (72, 9): 44, (62, 9): 4, (16, 26): 36, (8, 41): 3, (75, 21): 4, (38, 12): 11, (8, 47): 1, (49, 0): 4, (None, 23): 36, (4, 16): 6, (16, 66): 2, (4, 65): 45, (30, 5): 1, (5, 0): 15, (5, 64): 1, (5, 18): 10, (4, 48): 5, (48, 38): 3, (18, 18): 24, (15, 53): 10, (22, 36): 4, (49, 18): 6, (18, 74): 1, (74, 64): 1, (22, 72): 41, (29, 46): 13, (39, 5): 14, (61, 69): 1, (69, 52): 8, (5, 66): 7, (8, 53): 1, (4, 40): 41, (37, 66): 3, (46, 19): 2, (20, 35): 2, (27, 48): 12, (48, 3): 10, (47, 20): 17, (20, 57): 19, (19, 20): 9, (49, 29): 11, (54, 67): 1, (0, 73): 10, (0, 6): 5, (22, 26): 20, (39, 71): 4, (71, 36): 1, (7, 45): 3, (4, 36): 14, (56, 72): 7, (74, 7): 12, (29, 36): 3, (55, 7): 39, (47, 24): 1, (35, 20): 4, (17, 65): 19, (65, 30): 1, (53, 9): 36, (19, 34): 4, (54, 75): 5, (66, 6): 4, (None, 60): 13, (60, 30): 9, (19, 68): 4, (68, 19): 31, (39, 8): 3, (71, 58): 13, (58, 4): 24, (20, 54): 5, (67, 11): 1, (27, 16): 14, (39, 26): 3, (60, 72): 7, (1, 10): 1, (65, 59): 1, (17, 68): 28, (4, 15): 4, (73, 26): 9, (56, 59): 4, (12, 37): 11, (21, 11): 1, (35, 14): 9, (53, 8): 22, (9, 14): 23, (1, 7): 22, (56, 73): 6, (56, 68): 11, (19, 66): 9, (52, 7): 1, (56, 16): 7, (23, 40): 3,
     (71, 32): 10, (43, 13): 10, (7, 16): 8, (16, 55): 9, (29, 42): 2, (42, 11): 4, (24, 69): 4, (21, 35): 32, (7, 46): 7, (7, 38): 3, (29, 1): 12, (1, 4): 10, (47, 10): 1, (17, 42): 1, (3, 30): 37, (60, 59): 1, (30, 57): 1, (53, 69): 12, (69, 58): 6, (40, 12): 4, (71, 25): 29, (25, 33): 1, (49, 11): 9, (2, 10): 1, (21, 5): 19, (39, 66): 3, (33, 9): 1, (5, 13): 10, (46, 11): 4, (55, 68): 3, (56, 10): 19, (19, 21): 5, (49, 19): 3, (0, 5): 4, (49, 50): 7, (50, 32): 7, (55, 62): 4, (11, 61): 4, (75, 17): 19, (19, 11): 6, (4, 24): 4, (27, 61): 9, (None, 9): 13, (55, 26): 3, (26, 6): 8, (72, 11): 12, (10, 16): 23, (21, 69): 1, (69, 39): 15, (54, 20): 6, (17, 34): 19, (18, 39): 15, (67, 14): 4, (12, 36): 2, (29, 20): 4, (56, 61): 19, (59, 50): 4, (None, 62): 23, (16, 0): 3, (58, 13): 5, (58, 7): 9, (58, 17): 5, (20, 72): 23, (60, 13): 1, (72, 0): 16, (56, 67): 1, (48, 32): 17, (60, 61): 1, (8, 62): 5, (16, 4): 18, (36, 19): 2, (27, 72): 13, (60, 4): 3, (18, 12): 22, (37, 42): 2, (0, 55): 5, (19, 36): 3, (17, 14): 16, (18, 36): 5, (72, 8): 20, (73, 67): 2, (1, 19): 1, (72, 17): 39, (46, 10): 2, (38, 48): 2, (48, 29): 1, (59, 26): 1, (17, 37): 4, (20, 52): 1, (40, 4): 10, (10, 10): 57, (10, 22): 9, (10, 6): 3, (21, 61): 15, (0, 39): 5, (7, 37): 3, (7, 26): 17, (47, 50): 29, (50, 18): 2, (54, 73): 6, (44, 19): 1, (8, 29): 29, (8, 64): 1, (14, 47): 16, (47, 12): 16, (64, 10): 8, (56, 52): 3, (56, 57): 17, (65, 21): 4, (35, 70): 1, (70, 29): 16, (5, 20): 2, (69, 16): 4, (16, 74): 1, (39, 17): 31, (7, 74): 16, (24, 61): 3, (20, 21): 4, (57, 16): 4, (16, 61): 2, (13, 8): 3, (6, 69): 1, (16, 19): 4, (16, 18): 2, (15, 7): 3, (None, 16): 13, (18, 65): 11, (58, 16): 3, (72, 16): 2, (16, 7): 11, (13, 58): 13, (29, 16): 9, (53, 55): 14, (17, 21): 7, (73, 18): 12, (0, 65): 6, (5, 35): 7, (67, 29): 6, (12, 16): 23, (16, 32): 10, (10, 12): 26, (60, 0): 8, (66, 69): 6, (69, 64): 3, (6, 16): 2, (66, 1): 1, (68, 10): 5, (44, 29): 13, (21, 3): 1, (29, 51): 13, (37, 61): 4, (None, 73): 16, (73, 63): 1, (63, 7): 5, (None, 5): 12, (10, 23): 1, (72, 69): 12, (26, 71): 44, (7, 60): 1, (21, 13): 12, (18, 41): 9, (4, 45): 4, (24, 53): 1, (13, 64): 1, (64, 22): 11, (30, 68): 1, (59, 19): 13, (39, 36): 2, (16, 34): 8, (4, 51): 4, (10, 34): 2, (26, 61): 2, (24, 54): 6, (30, 61): 1, (61, 32): 9, (75, 13): 2, (54, 65): 9, (27, 66): 1, (65, 16): 1, (2, 7): 4, (7, 2): 7, (56, 65): 6, (17, 1): 10, (10, 74): 4, (74, 8): 6, (30, 20): 1, (6, 21): 6, (21, 45): 3, (57, 59): 9, (46, 18): 2, (71, 35): 58, (38, 6): 1, (7, 64): 44, (23, 45): 4, (45, 11): 4, (12, 34): 2, (53, 14): 6, (37, 21): 10, (38, 1): 4, (1, 59): 5, (0, 54): 11, (51, 32): 12, (47, 19): 3, (19, 38): 1, (5, 61): 4, (11, 55): 3, (13, 32): 19, (51, 12): 6, (11, 73): 8, (25, 35): 2, (46, 17): 4, (68, 55): 1, (71, 53): 4, (26, 23): 10, (41, 35): 2, (17, 16): 11, (29, 56): 2, (55, 16): 4, (53, 1): 2, (45, 56): 8, (11, 7): 3, (22, 64): 2, (46, 29): 9, (29, 29): 51, (2, 27): 8, (33, 4): 3, (4, 39): 19, (13, 16): 2, (24, 52): 5, (48, 27): 3, (21, 57): 12, (16, 72): 5, (64, 66): 1, (5, 16): 3, (56, 15): 13, (15, 8): 5, (23, 27): 3, (58, 0): 20, (72, 23): 2, (38, 23): 1, (36, 62): 2, (64, 8): 14, (65, 61): 5, (16, 9): 3, (65, 22): 7, (3, 53): 7, (72, 67): 8, (16, 25): 3, (19, 61): 6, (61, 73): 5, (20, 55): 5, (2, 72): 5, (22, 70): 4, (70, 7): 1, (66, 73): 1, (20, 64): 5, (7, 36): 3, (41, 19): 7, (8, 17): 40, (9, 48): 1, (48, 19): 1, (50, 0): 1, (16, 10): 1, (60, 27): 1, (13, 46): 6, (38, 42): 7, (30, 64): 1, (72, 65): 1, (16, 40): 3, (0, 35): 6, (35, 18): 21, (None, 70): 10, (70, 35): 5, (10, 64): 8, (8, 68): 3, (21, 1): 3, (62, 17): 37, (19, 10): 7, (46, 50): 14, (40, 0): 1, (8, 36): 5, (54, 16): 6, (39, 62): 6, (20, 4): 6, (7, 44): 4, (44, 17): 2, (16, 58): 2, (58, 66): 6, (74, 4): 4, (46, 16): 2, (16, 57): 1, (23, 34): 6, (53, 39): 12, (22, 16): 2, (16, 17): 8, (34, 61): 7, (61, 3): 4, (7, 40): 20, (56, 14): 7, (13, 26): 4, (52, 26): 3, (34, 32): 2, (56, 35): 6, (10, 55): 3, (66, 71): 1, (35, 26): 11, (5, 69): 2, (71, 47): 29, (47, 21): 14, (None, 69): 6, (69, 19): 6, (13, 21): 4, (21, 63): 2, (63, 26): 1, (57, 71): 16, (4, 64): 4, (19, 40): 2, (42, 10): 2, (17, 28): 5, (28, 18): 1, (10, 31): 1, (31, 29): 3, (8, 67): 2, (10, 47): 2, (64, 32): 7, (55, 61): 16, (4, 70): 3, (None, 35): 36, (23, 17): 2, (11, 36): 4, (15, 4): 10, (43, 5): 1, (65, 19): 9, (72, 66): 22, (61, 22): 10, (55, 57): 6, (48, 22): 6, (39, 61): 10, (66, 24): 1, (57, 23): 1, (4, 42): 4, (42, 4): 20, (38, 61): 2, (53, 56): 1, (34, 13): 1, (3, 29): 3, (27, 59): 10, (57, 63): 2, (38, 8): 6, (42, 27): 10, (29, 66): 12, (16, 47): 6, (41, 49): 7, (69, 47): 5, (8, 1): 1, (9, 10): 3, (8, 8): 34, (12, 49): 3, (67, 0): 5, (69, 72): 8, (30, 65): 1, (35, 6): 14, (33, 27): 9, (38, 10): 9, (61, 17): 9, (62, 66): 1, (57, 13): 18, (37, 17): 9, (72, 13): 11, (17, 71): 43, (37, 32): 3, (0, 20): 11, (None, 54): 55, (32, 30): 2, (None, 68): 23, (27, 15): 6, (56, 56): 11, (0, 62): 3, (56, 30): 9, (5, 30): 3, (3, 15): 3, (15, 17): 25, (19, 65): 8, (0, 47): 4, (75, 35): 7, (65, 10): 2, (33, 12): 4, (8, 35): 8, (6, 17): 8, (67, 18): 10, (0, 52): 6, (0, 63): 3, (24, 26): 2, (None, 32): 21, (26, 5): 1, (19, 14): 1, (72, 35): 3, (35, 69): 6, (18, 69): 9, (72, 53): 3, (22, 74): 1, (74, 5): 2, (52, 19): 3, (16, 21): 1, (33, 25): 5, (36, 17): 1, (60, 74): 1, (16, 8): 2, (12, 74): 4, (33, 18): 4, (5, 21): 4, (52, 72): 2, (57, 64): 3, (53, 35): 1, (58, 9): 7, (69, 63): 4, (43, 11): 4, (12, 2): 5, (72, 72): 9, (42, 21): 2, (9, 35): 15, (62, 26): 8, (60, 60): 3, (12, 62): 5, (66, 66): 4, (64, 55): 1, (0, 40): 1, (22, 33): 8, (33, 59): 18, (73, 19): 2, (42, 13): 1, (27, 32): 6, (39, 33): 1, (59, 18): 5, (68, 20): 1, (22, 1): 5, (37, 18): 8, (40, 13): 4, (4, 60): 1, (14, 29): 11, (17, 40): 9, (34, 1): 2, (18, 33): 4, (71, 51): 5, (16, 33): 1, (25, 72): 13, (27, 42): 5, (34, 19): 6, (6, 51): 3, (6, 46): 3, (22, 50): 4, (15, 72): 3, (40, 8): 1, (15, 61): 1, (6, 45): 7, (10, 2): 1, (2, 32): 3, (18, 6): 18, (66, 13): 4, (54, 72): 5, (55, 15): 3, (18, 14): 8, (57, 69): 10, (24, 23): 2, (64, 75): 4, (12, 60): 3, (60, 11): 2, (51, 11): 2, (59, 73): 2, (42, 8): 1, (16, 30): 5, (16, 22): 4, (14, 58): 2, (62, 72): 7, (43, 10): 1, (9, 71): 6, (57, 35): 11, (49, 27): 6, (6, 72): 1, (27, 35): 4, (12, 73): 7, (73, 3): 4, (7, 68): 9, (36, 30): 1, (73, 5): 6, (58, 57): 6, (74, 66): 3, (2, 0): 10, (42, 32): 2, (58, 47): 2, (17, 2): 2, (25, 62): 3, (25, 71): 5, (10, 39): 1, (58, 10): 3, (73, 74): 4, (66, 23): 1, (None, 38): 2, (6, 27): 13, (58, 6): 2, (20, 22): 15, (53, 70): 3, (27, 46): 1, (6, 56): 2, (1, 32): 7, (4, 30): 19, (23, 53): 20, (None, 58): 9, (72, 71): 1, (71, 10): 2,
     (56, 39): 8, (66, 21): 1, (72, 68): 1, (20, 71): 1, (65, 66): 3, (72, 75): 1, (29, 37): 6, (20, 30): 1, (None, 47): 20,
     (54, 74): 1, (74, 12): 1, (None, 1): 5, (34, 20): 1, (4, 73): 5, (0, 14): 12, (54, 52): 7, (38, 70): 1, (70, 24): 3, (14, 12): 4,
     (5, 74): 2, (74, 32): 6, (54, 71): 16, (75, 6): 1, (64, 65): 5, (48, 4): 4, (1, 0): 8, (73, 0): 8, (12, 13): 17, (53, 10): 4,
     (None, 74): 6, (34, 9): 1, (49, 10): 1, (72, 10): 5, (22, 62): 3, (71, 9): 5, (12, 65): 5, (8, 71): 3, (58, 35): 3, (13, 63): 3,
     (74, 55): 6, (35, 58): 1, (20, 7): 9, (48, 11): 4, (57, 42): 3, (17, 62): 12, (62, 0): 12, (57, 72): 15,
     (21, 56): 5, (46, 0): 6, (56, 42): 1, (4, 33): 1, (61, 19): 8, (8, 58): 1, (0, 30): 18, (64, 61): 2,
     (61, 72): 11, (67, 21): 2, (21, 66): 4, (58, 19): 9, (61, 71): 4, (60, 55): 1, (57, 58): 3, (5, 68): 14,
     (42, 0): 5, (21, 12): 11, (72, 37): 1, (73, 17): 12, (50, 29): 5, (56, 1): 12, (57, 68): 9, (58, 8): 4,
     (13, 20): 1, (19, 46): 6, (2, 19): 1, (7, 48): 3, (59, 67): 1, (9, 15): 1, (15, 39): 1, (32, 4): 10, (15, 25): 2,
     (73, 53): 2, (19, 42): 2, (61, 64): 4, (40, 69): 1, (69, 3): 2, (7, 43): 1, (18, 63): 2, (26, 39): 1, (71, 42): 1,
     (21, 25): 7, (24, 12): 3, (53, 26): 10, (58, 21): 3, (14, 51): 7, (22, 71): 1, (0, 13): 6, (43, 52): 1, (19, 13): 6,
     (57, 30): 6, (57, 60): 1, (55, 74): 1, (13, 70): 1, (70, 22): 1, (58, 26): 3, (45, 3): 3, (21, 20): 1, (8, 59): 14,
     (58, 69): 4, (47, 13): 3, (58, 23): 1, (55, 23): 1, (44, 13): 1, (8, 44): 1, (64, 30): 7, (15, 30): 9, (0, 24): 1, (72, 6): 5, (38, 18): 5, (46, 27): 3, (12, 40): 3, (69, 22): 2, (58, 54): 1, (55, 58): 1, (None, 51): 9, (12, 30): 3, (4, 67): 2, (53, 60): 1, (60, 56): 1, (17, 33): 3, (9, 72): 3, (0, 75): 3, (57, 47): 2, (2, 64): 2, (60, 22): 1, (19, 74): 7, (74, 9): 6, (64, 73): 8, (36, 18): 1, (61, 62): 3, (74, 57): 1, (9, 0): 2, (53, 62): 1, (9, 16): 3, (53, 73): 1, (13, 69): 1, (18, 73): 4, (15, 11): 5, (29, 70): 8, (47, 73): 1, (62, 16): 2, (75, 26): 2, (6, 18): 4, (10, 8): 1, (10, 58): 1, (10, 3): 4, (5, 65): 2, (6, 59): 8, (19, 60): 7, (0, 25): 1, (24, 13): 2, (5, 73): 1, (33, 55): 1, (38, 30): 1, (18, 59): 5, (68, 18): 2, (51, 27): 1, (34, 62): 4, (43, 66): 1, (37, 26): 1, (41, 8): 9, (43, 0): 1, (38, 11): 13, (16, 54): 8, (50, 11): 7, (61, 16): 1, (61, 74): 3, (58, 72): 2, (15, 26): 2, (6, 7): 1, (67, 16): 2, (0, 69): 6, (17, 15): 1, (7, 33): 5, (40, 7): 1, (66, 5): 1, (18, 42): 1, (63, 0): 1, (0, 61): 8, (58, 39): 1, (39, 52): 1, (38, 65): 2, (14, 72): 1, (25, 27): 1, (64, 74): 14, (74, 22): 4, (11, 30): 5, (61, 57): 3, (18, 62): 7, (52, 33): 4, (71, 12): 2, (58, 1): 2, (1, 3): 3, (27, 5): 3, (71, 13): 3, (21, 41): 2, (35, 71): 6, (25, 1): 3, (75, 55): 2, (14, 54): 7, (41, 0): 2, (64, 68): 4, (33, 47): 3, (57, 73): 5, (0, 23): 4, (72, 56): 3, (29, 38): 6, (50, 4): 4, (64, 9): 8, (22, 63): 5, (48, 50): 4, (18, 58): 2, (62, 5): 2, (34, 21): 5, (43, 19): 2, (63, 64): 4, (63, 61): 4, (59, 44): 5, (11, 65): 4, (73, 35): 2, (68, 27): 2, (47, 26): 4, (64, 35): 4, (74, 3): 5, (22, 44): 4, (53, 30): 3, (21, 30): 2, (6, 13): 4, (29, 2): 3, (57, 1): 6, (None, 67): 4, (20, 38): 3, (48, 16): 2, (0, 57): 3, (35, 64): 3, (6, 61): 10, (72, 57): 6, (59, 62): 9, (47, 53): 2, (70, 54): 2, (43, 59): 2, (37, 71): 2, (72, 73): 4, (74, 13): 2, (67, 17): 5, (34, 23): 2, (17, 70): 4, (49, 70): 5, (55, 70): 4, (26, 42): 2, (9, 13): 9, (9, 51): 2, (35, 30): 6, (35, 15): 2, (38, 13): 2, (33, 19): 5, (54, 54): 3, (64, 53): 3, (54, 70): 3, (50, 27): 2, (15, 71): 4, (4, 74): 4, (53, 42): 2, (3, 55): 3, (27, 57): 9, (75, 61): 8, (42, 5): 2, (39, 1): 9, (2, 3): 3, (7, 1): 11, (61, 5): 3, (73, 69): 4, (27, 70): 6, (70, 36): 2, (62, 61): 3, (16, 16): 4, (68, 0): 3, (73, 72): 4, (37, 44): 4, (6, 10): 5, (23, 28): 2, (28, 11): 2, (75, 31): 2, (31, 47): 2, (5, 54): 3, (35, 67): 5, (34, 17): 2, (29, 44): 2, (8, 69): 2, (63, 72): 2, (16, 46): 3, (8, 39): 2, (53, 65): 4, (73, 22): 10, (59, 39): 2, (38, 9): 2, (33, 0): 2, (65, 3): 4, (64, 20): 4, (6, 57): 2, (9, 74): 2, (69, 4): 11, (46, 21): 9, (15, 32): 2, (75, 20): 2, (33, 75): 3, (50, 57): 3, (0, 74): 4, (73, 12): 2, (50, 22): 2, (59, 14): 3, (50, 70): 2, (70, 0): 3, (73, 64): 2, (51, 21): 2, (None, 36): 2, (36, 11): 2, (50, 17): 2, (58, 14): 2, (53, 34): 2, (71, 8): 7, (40, 53): 2, (41, 7): 5, (10, 52): 8, (73, 10): 4, (12, 25): 5, (59, 64): 2, (52, 53): 2, (43, 39): 4, (70, 4): 2, (63, 9): 9, (23, 19): 2, (56, 75): 2, (37, 8): 2, (17, 44): 4, (41, 17): 2, (62, 30): 2, (70, 12): 2, (None, 33): 5, (53, 68): 3, (35, 16): 2, (16, 12): 2, (61, 55): 2, (61, 28): 2, (28, 27): 4, (17, 31): 6, (55, 67): 3, (28, 6): 2, (6, 47): 6, (None, 31): 2, (31, 55): 2, (22, 14): 4, (1, 72): 3, (66, 61): 4, (13, 72): 3, (75, 52): 2, (65, 9): 4, (72, 74): 4, (61, 30): 3, (42, 64): 2, (61, 58): 2, (26, 35): 2, (4, 28): 2, (31, 9): 2, (35, 44): 4, (63, 32): 2, (54, 48): 2, (9, 7): 3, (28, 7): 2, (59, 31): 2, (31, 8): 2, (59, 48): 2, (69, 73): 2, (66, 53): 2, (4, 2): 2, (59, 1): 2, (19, 1): 14, (1, 22): 2, (1, 54): 4, (18, 21): 2, (44, 7): 3, (1, 75): 2, (62, 3): 2, (61, 14): 4, (38, 44): 5, (47, 30): 2, (66, 64): 2, (47, 35): 2, (66, 20): 3, (59, 42): 2, (59, 10): 7, (66, 48): 2, (65, 5): 2, (25, 65): 2, (43, 18): 3, (65, 20): 2, (55, 53): 2, (75, 59): 3, (18, 70): 2, (15, 6): 2, (70, 20): 2, (47, 8): 2, (15, 13): 4, (43, 35): 5, (35, 56): 2, (56, 54): 3, (33, 71): 2, (64, 58): 2, (68, 22): 3, (44, 21): 8, (36, 29): 3, (19, 6): 3, (57, 28): 2, (28, 19): 2, (31, 19): 2, (75, 72): 4, (72, 24): 3, (25, 61): 2, (68, 64): 2, (41, 12): 2, (61, 35): 3, (49, 62): 3, (62, 71): 2, (5, 48): 2, (43, 17): 3, (49, 21): 2, (57, 56): 1, (3, 35): 1, (67, 10): 1, (8, 9): 3, (9, 26): 1, (60, 15): 1, (0, 58): 2, (57, 33): 2, (72, 64): 2, (55, 35): 2, (73, 9): 3, (0, 51): 1, (33, 40): 1, (40, 19): 1, (6, 33): 1, (33, 35): 2, (71, 56): 1, (53, 71): 1, (1, 12): 1, (39, 73): 3, (63, 71): 3, (39, 15): 2, (33, 36): 1, (56, 33): 2, (33, 21): 1, (19, 57): 2, (33, 39): 1, (65, 24): 1, (39, 56): 2, (5, 39): 1, (57, 52): 3, (72, 41): 2, (50, 1): 1, (3, 60): 2, (11, 60): 1, (None, 65): 7, (70, 65): 1, (26, 69): 1, (64, 62): 2, (39, 30): 1, (33, 69): 1, (39, 72): 1, (70, 68): 2, (64, 3): 3, (21, 72): 1, (66, 63): 1, (11, 63): 3, (9, 23): 1, (35, 52): 1, (1, 41): 1, (19, 75): 1, (26, 32): 1, (64, 5): 1, (71, 73): 1, (8, 30): 1, (71, 24): 1, (72, 63): 1, (24, 75): 1, (18, 37): 1, (65, 68): 2, (4, 71): 4, (3, 62): 1, (72, 20): 2, (38, 7): 1, (61, 75): 1, (75, 65): 1, (71, 41): 7, (41, 21): 4, (54, 47): 3, (75, 64): 1, (20, 47): 1, (3, 27): 1, (61, 61): 1, (8, 52): 1, (2, 20): 1, (2, 59): 1, (68, 71): 1, (None, 56): 1, (64, 69): 1, (20, 32): 3, (34, 16): 1, (10, 75): 1, (8, 54): 1, (71, 72): 2, (5, 52): 1, (0, 60): 2, (34, 64): 1, (72, 61): 1, (54, 49): 1, (52, 14): 1, (14, 37): 1, (26, 70): 1, (61, 21): 1, (21, 64): 1, (19, 63): 1, (68, 13): 1, (72, 39): 2, (73, 71): 1, (72, 62): 2, (57, 44): 1, (69, 13): 3, (34, 73): 1, (73, 39): 1, (71, 75): 2, (10, 61): 1, (1, 68): 1, (43, 20): 1, (74, 67): 1, (12, 50): 1, (35, 50): 1, (50, 38): 1, (65, 8): 3, (57, 15): 1, (71, 3): 1, (None, 42): 1, (62, 24): 1, (57, 53): 2, (52, 11): 1, (12, 63): 4, (9, 63): 1, (55, 20): 1, (14, 27): 1, (69, 75): 1, (37, 13): 1, (13, 71): 4, (33, 51): 1, (70, 63): 1, (60, 54): 1, (25, 41): 1, (72, 33): 1, (9, 5): 1, (5, 72): 2, (64, 63): 1, (58, 71): 1, (66, 74): 1, (53, 64): 2, (38, 39): 1, (37, 51): 1, (10, 63): 1, (66, 70): 1, (70, 25): 1, (62, 55): 1, (71, 23): 2, (41, 20): 1, (9, 6): 1, (20, 8): 2, (20, 75): 1, (51, 17): 1, (60, 19): 1, (49, 20): 1, (55, 52): 1, (20, 2): 2, (11, 53): 1, (53, 23): 1, (48, 21): 1, (41, 11): 2, (9, 64): 1, (13, 73): 1, (75, 47): 2, (39, 16): 1, (16, 11): 1, (39, 44): 2, (46, 39): 1, (51, 13): 1, (62, 22): 1, (52, 17): 1, (41, 18): 1, (18, 71): 1, (0, 53): 2, (8, 7): 4, (44, 0): 1, (50, 7): 1, (25, 2): 2, (58, 62): 1, (40, 11): 1, (68, 21): 2, (54, 51): 2, (40, 18): 2, (65, 39): 1, (55, 39): 2, (7, 7): 3, (39, 48): 2, (48, 12): 1, (37, 73): 1, (52, 21): 1, (59, 70): 1, (44, 32): 3, (71, 74): 1, (54, 2): 2, (73, 55): 1, (10, 67): 1, (67, 27): 1, (71, 26): 2, (64, 25): 1, (64, 57): 1, (63, 3): 2, (10, 37): 1, (19, 62): 1, (62, 54): 1, (36, 27): 1, (59, 71): 1, (5, 58): 1, (72, 34): 1, (58, 68): 2, (8, 70): 2, (55, 33): 1, (64, 34): 1, (20, 50): 1, (6, 8): 1, (54, 53): 1, (6, 14): 1, (57, 54): 1, (12, 43): 1, (57, 36): 1, (73, 52): 1, (51, 19): 1, (57, 39): 1, (25, 39): 1, (13, 36): 1, (36, 64): 1, (57, 57): 1, (33, 10): 1, (14, 32): 1, (41, 13): 2, (58, 61): 1, (60, 57): 1, (60, 52): 1, (14, 46): 1, (64, 59): 2, (32, 7): 1, (72, 59): 1, (18, 16): 1, (72, 45): 1, (68, 6): 1, (20, 14): 1, (3, 73): 1, (55, 73): 1, (71, 14): 1, (34, 8): 1, (57, 46): 1, (17, 38): 1, (71, 67): 1, (10, 25): 1, (38, 32): 1, (25, 8): 1, (12, 24): 1, (12, 51): 1, (51, 29): 1, (22, 60): 1, (6, 63): 1, (11, 11): 1, (8, 75): 1, (25, 3): 1, (26, 54): 1, (73, 62): 1, (64, 47): 1, (34, 7): 1, (32, 24): 1, (13, 14): 1, (24, 30): 1,
     (None, 24): 1, (45, 17): 1, (17, 49): 1, (60, 12): 1, (32, 22): 1, (72, 51): 1, (63, 65): 1, (12, 46): 1, (75, 69): 1,
     (21, 65): 1, (20, 73): 1}
TagToCountT = {19: 8469, 54: 10120, 4: 13801, 27: 17055, 3: 19222, 17: 29601, 22: 21660, 29: 31843, 48: 80, 57: 4621, 35: 4826, 0: 13400, 9: 1533, 21: 1126, 8: 3572, 65: 447, 26: 5128, 47: 2990, 12: 4524, 72: 1160, 52: 3810, 56: 6829, 10: 1648, 18: 7646, 5: 3073, 23: 583, 11: 5467, 7: 8192, 71: 945, 32: 4149, 55: 4317, 75: 1196, 66: 1089, 16: 326, 63: 135, 30: 9034, 6: 768, 58: 497, 20: 670, 33: 139, 59: 2725, 53: 2282, 49: 743, 34: 1017, 38: 967, 25: 1077, 64: 1320, 13: 1587, 24: 528, 2: 195, 44: 107, 61: 500, 1: 363, 39: 1660, 46: 613, 51: 289, 15: 759, 68: 231, 37: 1201, 67: 228, 40: 628, 45: 125, 43: 315, 14: 555, 36: 148, 41: 627, 60: 71, 73: 333, 62: 335, 69: 315, 42: 86, 74: 172, 50: 87, 70: 70, 28: 13, 31: 13}
# S = []  # all possible states(pos tags)
TagToCount = {}
E = {}
 # map index of E to tag iff obvious and not end of the sentence
threshold = 3  # a value we use for the unknown M val
AfterThese = {}
CountThese = {}

def tag(training_names_list, test_name_file, output_name_file):
    # Tag the words from the untagged input file and write them into the output file.
    # Doesn't do much else beyond that yet.
    print("Tagging the file.")
    #
    # YOUR IMPLEMENTATION GOES HERE
    #
    print("Reading Training files...")
    _all_training_files_reader(training_names_list)
    print("Reading Test files...")
    E, Esize, SentenceStartsAt, Obvious = _test_file_reader(test_name_file)
    print("Getting answers...")
    results = Viterbi(E, Esize, SentenceStartsAt, Obvious)
    print("Writing Output file...")
    _write_answers(E, Esize, results, output_name_file)


# ----------------------- Initializing all the tags ----------------------------

HASHtoTAG = {0: 'AJ0', 1: 'AJC', 2: 'AJS', 3: 'AT0', 4: 'AV0', 5: 'AVP',
             6: 'AVQ', 7: 'CJC', 8: 'CJS', 9: 'CJT', 10: 'CRD', 11: 'DPS',
             12: 'DT0', 13: 'DTQ', 14: 'EX0', 15: 'ITJ', 16: 'NN0', 17: 'NN1',
             18: 'NN2', 19: 'NP0', 20: 'ORD', 21: 'PNI', 22: 'PNP', 23: 'PNQ',
             24: 'PNX', 25: 'POS', 26: 'PRF', 27: 'PRP', 28: 'PUL', 29: 'PUN',
             30: 'PUQ', 31: 'PUR', 32: 'TO0', 33: 'UNC', 34: 'VBB', 35: 'VBD',
             36: 'VBG', 37: 'VBI', 38: 'VBN', 39: 'VBZ', 40: 'VDB', 41: 'VDD',
             42: 'VDG', 43: 'VDI', 44: 'VDN', 45: 'VDZ', 46: 'VHB', 47: 'VHD',
             48: 'VHG', 49: 'VHI', 50: 'VHN', 51: 'VHZ', 52: 'VM0', 53: 'VVB',
             54: 'VVD', 55: 'VVG', 56: 'VVI', 57: 'VVN', 58: 'VVZ', 59: 'XX0',
             60: 'ZZ0', 61: 'AJ0-AV0', 62: 'AJ0-VVN', 63: 'AJ0-VVD',
             64: 'AJ0-NN1', 65: 'AJ0-VVG', 66: 'AVP-PRP', 67: 'AVQ-CJS',
             68: 'CJS-PRP', 69: 'CJT-DT0', 70: 'CRD-PNI', 71: 'NN1-NP0',
             72: 'NN1-VVB', 73: 'NN1-VVG', 74: 'NN2-VVZ', 75: 'VVD-VVN'}

TAGtoHASH = {'AJ0': 0, 'AJC': 1, 'AJS': 2, 'AT0': 3, 'AV0': 4, 'AVP': 5,
             'AVQ': 6, 'CJC': 7, 'CJS': 8, 'CJT': 9, 'CRD': 10, 'DPS': 11,
             'DT0': 12, 'DTQ': 13, 'EX0': 14, 'ITJ': 15, 'NN0': 16, 'NN1': 17,
             'NN2': 18, 'NP0': 19, 'ORD': 20, 'PNI': 21, 'PNP': 22, 'PNQ': 23,
             'PNX': 24, 'POS': 25, 'PRF': 26, 'PRP': 27, 'PUL': 28, 'PUN': 29,
             'PUQ': 30, 'PUR': 31, 'TO0': 32, 'UNC': 33, 'VBB': 34, 'VBD': 35,
             'VBG': 36, 'VBI': 37, 'VBN': 38, 'VBZ': 39, 'VDB': 40, 'VDD': 41,
             'VDG': 42, 'VDI': 43, 'VDN': 44, 'VDZ': 45, 'VHB': 46, 'VHD': 47,
             'VHG': 48, 'VHI': 49, 'VHN': 50, 'VHZ': 51, 'VM0': 52, 'VVB': 53,
             'VVD': 54, 'VVG': 55, 'VVI': 56, 'VVN': 57, 'VVZ': 58, 'XX0': 59,
             'ZZ0': 60, 'AJ0-AV0': 61, 'AJ0-VVN': 62, 'AJ0-VVD': 63,
             'AJ0-NN1': 64, 'AJ0-VVG': 65, 'AVP-PRP': 66, 'AVQ-CJS': 67,
             'CJS-PRP': 68, 'CJT-DT0': 69, 'CRD-PNI': 70, 'NN1-NP0': 71,
             'NN1-VVB': 72, 'NN1-VVG': 73, 'NN2-VVZ': 74, 'VVD-VVN': 75}

# -------------------------- Feeding Training Data -----------------------------
def _one_training_file_reader(one_training_file_name):
    """Not yet divided.
    All Initial, T, M have count, not prob.
    So after putting all training file names into this function,
    divide every element(count) by the total number of words-tags pair n."""
    with open(one_training_file_name, 'r') as one_training_file:
        tagged_words_list_in_one_training = one_training_file.readlines()
    # if tagged_words_list_in_one_training[-1] == "\n":
    #     del tagged_words_list_in_one_training[-1]
    global Initial
    global T
    global M
    global TagToCount, TagToCountT
    global AfterThese
    global CountThese

    prev = None
    double_quote_closed = True
    single_quote_closed = True
    these = ()
    # sharp_quote_closed = True  # ‘ = opening quote ’ = closing quote
    for pair_str in tagged_words_list_in_one_training:
        pair_list = pair_str.rstrip().split()
        curr_word = pair_list[0].lower()
        try:
            curr_tag = TAGtoHASH[pair_list[-1]]
        except:
            curr_tag = TAGtoHASH[pair_list[-1].split('-')[1]+'-'+pair_list[-1].split('-')[0]]  # 고쳐 do we have to do this tho?

        # TagToCount
        if curr_tag not in TagToCount:
            TagToCount[curr_tag] = 1
        else:
            TagToCount[curr_tag] += 1
            TagToCountT[curr_tag] += 1
        # Initial Count
        if prev is None:
            Initial[curr_tag] += 1

            # names? 고쳐

        # Transition
        # future denom is count of the yesterday(prev) = TagToCount[prev]
        # Transition Count
        transFromTo = (prev, curr_tag)  # 혹시 이게 오래 걸리면 고쳐. 세 개의 컴페
        if transFromTo in T:
            T[transFromTo] += 1
        else:
            T[transFromTo] = 1

        # Emission future denominator is count(tag)
        # Emission Count
        if curr_word in M:
            if curr_tag in M[curr_word]:
                M[curr_word][curr_tag] += 1
            else:
                M[curr_word][curr_tag] = 1
        else:
            M[curr_word] = {curr_tag: 1}

        if len(these) != 0:
            these = these[-threshold:]
            if these in AfterThese:
                if curr_tag in AfterThese[these]:
                    AfterThese[these][curr_tag] += 1
                else:
                    AfterThese[these][curr_tag] = 1
                CountThese[these] += 1
            else:
                AfterThese[these] = {curr_tag: 1}
                CountThese[these] = 1
        these += (curr_word,)

        # Incrementing
        if curr_word == '.' or curr_word == '?' or curr_word == '!' or curr_word == ';':# or '’': # or '’' or '"':
            prev = None
        elif curr_word == "'":
            if single_quote_closed:
                single_quote_closed = False
            else:  # it has been opened. Now it is a closing one.
                single_quote_closed = True
                prev = None
        elif curr_word == '"':
            if double_quote_closed:
                double_quote_closed = False
            else:  # it has been opened. Now it is a closing one.
                double_quote_closed = True
                prev = None
        else:
            prev = curr_tag


def _all_training_files_reader(training_name_list:list):
    """Read all training files by calling one_training_file_reader,
    and make the counts stored in Initial, T, M into probabilities."""
    for each_training_file_name in training_name_list:
        _one_training_file_reader(each_training_file_name)

    global Initial
    global T
    global M
    global TagToCount, TagToCountT
    global AfterThese
    global CountThese
    # filehandler = open('M_saver.txt', 'wt')
    # filehandler.write(str(M))
    # filehandler.close()
    # filehandler = open('T_saver.txt', 'wt')
    # filehandler.write(str(T))
    # filehandler.close()
    ini = sum(Initial.values())
    for possible_first_tag in Initial:
        if Initial[possible_first_tag] == 0:
            Initial[possible_first_tag] = -11
            continue
        Initial[possible_first_tag] = log(Initial[possible_first_tag] / ini)

    for transFromTo in T:
        if transFromTo[0] is None:
            continue
        T[transFromTo] = log(T[transFromTo] / TagToCountT[transFromTo[0]])

    for word in M:
        for ta in M[word]:
            M[word][ta] = log(M[word][ta] / TagToCount[ta])

    for these in AfterThese:
        for ta in AfterThese[these]:
            AfterThese[these][ta] = log(AfterThese[these][ta]/CountThese[these])


# ---------------------------- Reading Test File -------------------------------

def _if_obvious(original_word: str, t: int, Obvious: dict, SentenceStartsAt):
    """See if word at index t is obvious.
    Add that index and maps to a tag, if so.

    Exclude the cases for ending:
    '.' '!' '?' ';':
    '"' '’':
    because this should be in not only Obvious but before the SentenceStart."""
    word = original_word.lower()
    if word == "‘" or word == "’":  # ‘ = opening quote ’ = closing quote
        Obvious[t] = 'PUQ'
    # elif word =! "'" and word[0] == "'":
    #     Obvious[t] = 'POS'
    elif word == ',' or word == ':':
        Obvious[t] = 'PUN'
    elif original_word.istitle() and len(SentenceStartsAt)>0 and t != SentenceStartsAt[-1]:
        Obvious[t] = 'NP0'
    elif word == 'of':
        Obvious[t] = 'PRF'
    elif word == 'the':
        Obvious[t] = 'AT0'
    elif word == {'he', 'she', 'i', 'you', 'me', 'it', 'him', 'her', 'them', 'they', 'hers', 'theirs', 'ours', 'us', 'mine'}:
        Obvious[t] = 'PNP'   # training 5 last 고쳐'
    elif word in {"my", "your", "their", "her", "our", "its"}:
        Obvious[t] = 'DPS'
    else:
        return

def _test_file_reader(test_file_name:str):
    """
    Obvious = {} map index of E to tag iff obvious and not end of the sentence
    :param test_file_name: string of the test file name
    :return: list of the words in order E
    """
    E = {}
    SentenceStartsAt = []
    Obvious = {}
    with open(test_file_name, 'r') as test_file_obj:
        untagged_lines = test_file_obj.readlines()
    Esize = len(untagged_lines)
    t = 0
    while t < Esize-1:
        word = untagged_lines[t].split()[0]
        E[t] = word
        if word == '.' or word == '!' or word == '?' or word == ';':
            Obvious[t] = 'PUN'
            SentenceStartsAt.append(t+1)
        elif word == '"' or word == '’':
            Obvious[t] = 'PUQ'
            SentenceStartsAt.append(t+1)
        else:
            _if_obvious(word, t, Obvious, SentenceStartsAt)
        t += 1
    # By the end of the loop, it is t=Esize-1, which is the very last index.

    word = untagged_lines[t].split()[0]
    E[t] = word
    if word == '.' or word == '!' or word == '?' or word == ';':
        Obvious[t] = 'PUN'
    elif word == '"' or word == '’':
        Obvious[t] = 'PUQ'
    else:
        _if_obvious(word, t, Obvious, SentenceStartsAt)
    return E, Esize, SentenceStartsAt, Obvious


# --------------------------- Viterbi Functions --------------------------------

def _find_obvious(prev_tag, word) -> list:
    """

    :param prev_tag:
    :param word: observed word
    :return: [] if there is no obvious tag
             [list of possible tags]
              if there is an obvious tag, and the corresponding tag.
    """
    if prev_tag == 'AT0':
        return ['NN0', 'NN1', 'NN2', 'NP0']
        # (1, NN0 Common noun, neutral for number (e.g. aircraft, data, committee) [N.B. Singular collective nouns such as committee and team are tagged NN0, on the grounds that they are capable of taking singular or plural agreement with the following verb: e.g. 'The committee disagrees/disagree'.]
        #
        # NN1 Singular common noun (e.g. pencil, goose, time, revelation)
        #
        # NN2 Plural common noun (e.g. pencils, geese, times, revelations)
        #
        # NP0 Proper noun )
#
def _get_M(E, total_t, i, t) -> float:
    """Return log prob of estimated emission prob for this word.
    Consider this when there's no tag for this word."""
    worst = -11
    word = E[total_t]
    # check if there's a variation of this word.
    if word in M and i in M[word]:
        return M[word][i]
        # else:
        #     return -11
    return _check_variation(E, total_t, i, word)
    # check if there's a variation of this word.
    # if there's a word similar to this, we can return that prob.

    # else: # word not in M and i not in M[word] " I have never seen such a word"

def _check_variation(E, total_t, i, word) -> float:
    """ tnstjorder might matter fixfix
    Return True, log prob of that word's variation emission prob
    """
    v1 = word.lower()
    if v1 in M:
        if i in M[v1]:
            return M[v1][i]
    else:
        temp = copy(total_t)
        seen_these = ()
        added = 0
        while added < threshold and temp > 0:
            seen_these = (E[temp-1],) + seen_these
            temp -= 1
            added += 1
        if seen_these in AfterThese:
            if i in AfterThese[seen_these]:
                return AfterThese[seen_these][i]
    return -11



def _find_max_index(t: int, prob: dict, i: int, E: dict, total_t:int) \
        -> tuple:
    max_index = None  # or can be None instead
    max_probval = -float('inf')  # cux probabilities cannot be negative, can make it -1
    for x in prob[0]:  # = range(len(prob[t-1])):
        transFromTo = (x, i)
        word = E[total_t]  # i is tag
        onlyep_used = True  # NOT only epsilon (fake value) used => only use sth
        m = _get_M(E, total_t, i, t)
        if m > -11 and transFromTo in T:
            curr_val = prob[0][x] + T[transFromTo] + m
            onlyep_used = False
        elif onlyep_used:
            if transFromTo in T and (word not in M or i not in M[word]):
                curr_val = prob[0][x] + T[transFromTo] + m
            else: # rhcu fixfix you dont want to use epsilon if there's at least one
                curr_val = prob[0][x] -11 + m
        else:
            continue
        if curr_val > max_probval:
            max_index = x
            max_probval = curr_val
    return max_index, max_probval


def Viterbi(E, Esize, SentenceStartsAt, Obvious) -> list:
    """
    Make a guess for a whole paragraph(test file)
    E[t] sequence of obs prob for each t
    S is possible values of hidden states
    :param start: starting index
    :param end: ending index (exclusive, as we have filled in already possibly
                                except for the very last index)
    :param prob: the prob dict we have to fill in for each timestep and state
    :param prev: the prev dict we have to fill in for each timestep and state
    :return: None. Instead, it fills in the value inside prob and prev
    """
    global Initial, T, M
    NumberOfSentences = len(SentenceStartsAt)
    # Splitting the test paragraph to sentences
    sentences = []
    # 몇번째 문장 = 1
    sentence = [E[0]]
    for t in range(1, Esize):
        if t in SentenceStartsAt:
            sentences.append(sentence)
            sentence = [E[t]]  # reset
        else:
            sentence += [E[t]]
    sentences.append(sentence)
    total_t = 0
    results = []
    for sentence in sentences:
        sentence_len = len(sentence)
        if sentence_len == 1:  # this means this sentence ends by 1 char.
            results += [Obvious[total_t]]
            total_t += 1
            continue
        prob = {0: {}}
        prev = {0: {}}
        # for t in range(sentence_len):
        #     emp = []
        #     for i in range(76):
        #         emp.append([])
        #     prev.append(emp)

        # Can we assume it's known? to be end, it should be in SentenceEndsAt.
        # The only possibility of SentenceEndsAt[thing] is not known is when it is
        # the very last word. 마지막인데 내가 처음보는 문자로 끝날 경우... 일단은 PUN으로 그냥 밀어두고, 나중에 emission prob 제일 높은 걸로 마무리.
        # BASE CASE
        # Determine the values for time step 0 (BASE CASE) # 고쳐... M[][]로
        if total_t in Obvious:
            otag = Obvious[total_t]
            h = TAGtoHASH[otag]
            prob[0][h] = 0
            prev[0][h] = [otag]
        else:
            for i in HASHtoTAG:
                word = E[total_t]
                if word in M and i in M[word]:
                    prob[0][i] = Initial[i] + M[word][i] # initial_prob * emission_prob
                else:  # elif word not in M or i not in M[word]:
                    prob[0][i] = Initial[i] - _get_M(E, total_t, i, 0)
                # else:
                #     prob[0][i] = -22
                prev[0][i] = [HASHtoTAG[i]]
        # Normalize and put it back
        # sum_by_row = -sum(prob[0].values())  # timestep = t
        # for i in prob[0]:
        #     prob[0][i] = prob[0][i] / sum_by_row
        total_t += 1


        # Revursive case
        # for time steps 1 to len(E)-1,
        # find each curr state's most likely prior state x (RECURSIVE CASE!)
        t = 1
        while t < sentence_len:
            prob[1] = {}
            prev[1] = {}
            if total_t in Obvious:
                otag = Obvious[total_t]
                h = TAGtoHASH[otag]
                prob[1][h] = 0
                max_former = max(prob[0], key=prob[0].get)
                prev[1][h] = prev[0][max_former] + [otag]
                total_t += 1
                t += 1
                prob[0] = prob[1]
                prev[0] = prev[1]
                continue
            for i in HASHtoTAG:
                max_former, max_probval = _find_max_index(t, prob, i, E, total_t)
                prob[1][i] = max_probval  # dㅝㄴ래 0이상인 것만 넣었는데 없앰.. fixfix
                prev[1][i] = prev[0][max_former] + [HASHtoTAG[i]]
            prob[0] = prob[1]
            prev[0] = prev[1]
            total_t += 1
            t += 1
            # Normalize and put it back
            # sum_by_row = -sum(prob[t].values())  # timestep = t
            # for i in prob[t]:
            #     prob[t][i] = prob[t][i] / sum_by_row
        # Handling the known i for each end. for the unknown VL, we will still do this
        # by just considering it as PUN=1, but will be better handled outside later!
        # prob[end][TAGtoHASH[SentenceEndsAt[end]]] = 0
        # prev[end][TAGtoHASH[SentenceEndsAt[end]]] = max(prob[end-1], key=prob[end-1].get)
        last = _find_last(prob, 1, total_t-1, Obvious)
        final_path = prev[1][last]
        results += final_path
    return results


# ----------------------------- Fill in the output -----------------------------

def _find_last(prob, end, total_t, Obvious) -> int:
    """Find the largest probability having HASH for the last observation."""
    if total_t in Obvious:
        return TAGtoHASH[Obvious[total_t]]
    # return prob[end].index(max(prob[end]))  # max(prob[end], key=prob[end].get)
    return max(prob[end], key=prob[end].get)


def _write_answers(E, Esize, results, output_filename):
    combined = []
    for i in range(Esize):
        combined.append(f"{E[i]} : {results[i]}\n")
    with open(output_filename, 'w') as output_file_obj:
        output_file_obj.writelines(combined)

# ------------------------------------------------------------------------------


if __name__ == '__main__':
    # Run the tagger function.
    print("Starting the tagging process.")

    # Tagger expects the input call: "python3 tagger.py -d <training files> -t <test file> -o <output file>"
    try:
        parameters = sys.argv
        training_list = parameters[
                        parameters.index("-d") + 1:parameters.index("-t")]
        test_file = parameters[parameters.index("-t") + 1]
        output_file = parameters[parameters.index("-o") + 1]
    except:
        training_list = ["data/training1.txt", "data/training2.txt", "data/training3.txt", "data/training4.txt", "data/training5.txt", "data/new.txt"]
        test_file = "/validation/given_test1.txt"
        output_file = "/validation/output1.txt"
    print("Training files: " + str(training_list))
    print("Test file: " + test_file)
    print("Output file: " + output_file)
    # Start the training and tagging operation.
    tag(training_list, test_file, output_file)

"""Idea:
The + noun
Counter example:
The escaped dog
The running rabbit
At least not present tense

. + non verb present tense
Can't be just verbs:
Having said that,

문장의 첫 번째가 아닌데 capital이라면 그것은 이름.

' " 면 그냥 곧장 뉴 센턴스..
"""
